identity_and_access:
  documentation_links:
  - https://help.cirface.com/en/knowledge/how-to-set-up-saml-based-sso-with-asana
  - https://developers.asana.com/docs/scim
  - https://learn.microsoft.com/en-us/entra/identity/saas-apps/asana-provisioning-tutorial
  - https://help.asana.com/s/article/role-based-access-control-with-custom-roles?language=en_US
  - https://help.asana.com/s/article/role-based-access-control-with-custom-roles?language=en_US
  - https://developers.asana.com/docs/javascript
  - https://www.npmjs.com/package/asana
  - https://github.com/Asana/asana-node-openapi-generator
  - https://help.asana.com/s/article/how-to-invite-team-members-to-asana?language=en_US
  - https://asana.com/resources/incident-management
  - https://asana.com/inside-asana/engineering-security-incident-response
  lifecycle_options:
  - Active
  - Guest
  - Pending Invite
  - Deprovisioned (zombified via SCIM)
  rbac_api_assignment:
    reference: https://www.eonesolutions.com/help-article/how-to-assign-security-roles-for-api-endpoint-access-to-users-or-teams/
    value: uncertain - While Asana supports RBAC with custom roles and allows super
      admins to assign roles via the admin console, direct API support for assigning
      these roles was not explicitly detailed in the provided documentation.
  rbac_support:
    reference: https://help.asana.com/s/article/role-based-access-control-with-custom-roles?language=en_US
    value: yes - Asana supports Role-Based Access Control (RBAC) with custom roles,
      allowing granular control over user permissions.
  scim_authentication_acquisition_steps:
    reference: https://help.asana.com/s/article/provisioning-and-deprovisioning-users-with-scim?language=en_US
    value: '1. Log in to a super admin account on Asana. 2. Navigate to the Admin
      Console menu by clicking on your profile picture in the top right, and clicking
      Admin Console. 3. Navigate to the Apps tab and click Add service account. 4.
      From Permissions scopes, choose Scoped permissions, tick the User provisioning
      (SCIM) box and ensure all permissions below are checked: Users: Read; Users:
      Create and modify; Teams: Read; Teams: Create and modify. 5. Select Save Changes.
      6. Copy the token.'
  scim_authentication_mechanisms:
    reference: https://help.asana.com/s/article/provisioning-and-deprovisioning-users-with-scim?language=en_US
    value: API Token.
  scim_licensing_level_requirement:
    reference: https://developers.asana.com/docs/scim
    value: Only Service Accounts in Enterprise Domains can access SCIM endpoints.
  scim_support:
    reference: https://developers.asana.com/docs/scim
    value: yes - SCIM 2.0. Asana supports SCIM provisioning via Microsoft Entra ID,
      Google Workspace, Okta, and OneLogin.
  seat_costs:
  - archived:
      reference: https://projectmanagers.net/asana-pricing-plans-costs-guide/
      value: uncertain - No information regarding payment for archived users was found
        in the provided search results.
    license_level: Uncertain - specific pricing details for individual license levels
      (Starter, Advanced, Enterprise, Enterprise+) are not provided in the search
      results. Licensing is managed through different tiers.
    suspended_disabled:
      reference: https://developers.asana.com/docs/scim
      value: uncertain - The search results do not explicitly state whether payment
        is required for suspended or disabled users. However, SCIM deprovisioning
        zombifies users, implying they are not fully deleted.
  sso_license_level_requirement:
    reference: https://help.cirface.com/en/knowledge/how-to-set-up-saml-based-sso-with-asana
    value: Enterprise or Enterprise+ Asana subscription.
  sso_support:
    reference: https://help.cirface.com/en/knowledge/how-to-set-up-saml-based-sso-with-asana
    value: yes - SAML 2.0 with identity providers like Okta, Azure AD, Google Workspace,
      miniOrange, OneLogin, SecureAuth IdP, and JumpCloud.
  user_management_api_authentication_acquisition_steps:
    reference: https://developers.asana.com/docs/javascript
    value: 1. Log in to Asana. 2. Navigate to Developer App Management. 3. Generate
      a Personal Access Token. (This is a general process for acquiring PATs for Asana
      API, specific detailed steps for user management API were not found but PATs
      are the common authentication method).
  user_management_api_authentication_mechanisms:
    reference: https://developers.asana.com/docs/javascript
    value: Personal Access Token (PAT).
  user_management_api_licensing_level:
    reference: hallucinated link doublecheck content
    value: Uncertain. While the API for user management is available, specific licensing
      requirements for non-SCIM user management API actions are not explicitly stated
      in the provided search results. Access to the Admin Console and related settings
      is often tied to higher-tier plans (e.g., Enterprise or Enterprise+ for SSO
      and SCIM).
  user_management_api_support:
    reference: https://developers.asana.com/docs/javascript
    value: yes - Asana provides an API for user management, including inviting users,
      adding users to workspaces/organizations, and retrieving user information. [18,
      27, 33, 38]
security_monitoring:
  documentation_links:
  - https://panther.com/integrations/asana-logs
  - https://developers.asana.com/docs/audit-log-events
  - https://qwerty1q2w.medium.com/how-to-collect-asana-audit-logs-e7380aae9cda
  event_logs:
    api_call:
      reference: https://developers.asana.com/reference/audit-log-api
      value: The Asana Audit Log API itself provides a mechanism to monitor and act
        upon critical security and compliance-related changes in an organization's
        Asana instance. The audit log events provide details about the actor (user),
        the resource affected, the event type, and context like IP address and user
        agent. [1, 5] The API is read-only for audit log events. [1]
    configuration_change:
      reference: https://developers.asana.com/docs/audit-log-events
      value: Asana's Audit Log API provides detailed logs for key changes made by
        administrators in the admin console, including 'workspace_password_requirements_changed',
        and changes related to IP allowlisting, idle session duration, and specific
        app approval settings. [2, 5]
    data_export:
      reference: https://developers.asana.com/docs/audit-log-events
      value: Asana's Audit Log API captures export events such as 'project_csv_export_initiated'
        and 'workspace_teams_export_started'. These events provide visibility into
        data export actions from the Asana platform. [2, 5]
    role_assignment:
      reference: https://developers.asana.com/reference/audit-log-api
      value: Asana's Audit Log API logs role changes, including 'user_workspace_admin_role_changed',
        which indicates changes made by admins in the admin console. The events can
        include details about the old and new values of the modified fields. [1, 2,
        5]
    security_policy_change:
      reference: https://developers.asana.com/docs/audit-log-events
      value: Asana's Audit Log API records security policy changes, such as 'workspace_password_requirements_changed',
        'workspace_ip_allowlist_turned_off', 'workspace_ip_allowlist_turned_on', and
        changes to the type of users the IP allowlist applies to. It also includes
        events for changes to two-factor authentication for users. [1, 5]
    user_account_creation:
      reference: https://developers.asana.com/docs/audit-log-events
      value: The Asana Audit Log API logs user-related updates including 'user_invited'
        (a new user was invited or auto-joined), 'user_deprovisioned' (user removed),
        and 'user_reprovisioned' (deprovisioned user added back). [5]
    user_login:
      reference: https://developers.asana.com/reference/audit-log-api
      value: Asana's Audit Log API provides information on user login events, specifically
        'user_login_succeeded' (successful login), 'user_login_failed' (failed login),
        and 'user_logged_out' (user logout). These events include details such as
        the actor's GID, name, and email, along with context like IP address and user
        agent. [1, 5]
  event_logs_licensing_level:
    reference: https://developers.asana.com/docs/audit-log-api
    value: Access to Asana's Audit Log API endpoints requires Service Accounts belonging
      to organizations on the Asana Enterprise+ tier, the legacy tier Legacy Enterprise,
      or an Enterprise domain with the Compliance Management Add-on. [1, 2, 5, 6,
      7, 8, 11, 13]
  ingestion_methods:
  - reference: https://developers.asana.com/docs/audit-log-api
    value: Asana's Audit Log API is the primary method for accessing security logs.
      It's a RESTful interface that allows programmatic access to events. [1, 9, 13]
  - reference: https://asana.com/guide/help/enterprise/audit-log-api
    value: SIEM tools like Splunk, Panther, and Sumo Logic integrate with Asana using
      the Audit Log API to pull logs for security monitoring. [1, 3, 9, 13, 21]
  - reference: https://qwerty1q2w.medium.com/how-to-collect-asana-audit-logs-e7380aae9cda
    value: A Python library or custom scripts can be developed to collect logs via
      the Asana Audit Log API. [9]
  log_export_options:
    tools_connectors:
      reference: https://developers.asana.com/docs/audit-log-api
      value: Asana provides an Audit Log API for extracting security-related events.
        This API is read-only and allows organizations to pull audit log data to integrate
        with SIEM tools. [1, 2] Third-party integrations like Panther and Sumo Logic
        leverage this API for log ingestion. [3, 12, 13] While not explicitly stated
        as 'export options' like FTP or zip files, the API serves as the programmatic
        export mechanism.
  monitoring_products:
  - reference: https://panther.com/integrations/asana-logs
    value: Panther, a cloud SIEM platform, offers an integration to collect, normalize,
      and monitor Asana logs to identify suspicious activity in real-time. It connects
      to the Asana Audit Log API. [3, 12]
  - reference: https://help.sumologic.com/docs/send-data/hosted-collectors/cloud-to-cloud-integration-framework/asana-source/
    value: Sumo Logic provides an Asana Source integration that ingests events from
      the Asana Audit Logs API. [13]
  - reference: https://zapier.com/
    value: Zapier, an automation platform, can connect with Asana and offers features
      like audit logs, analytics, and real-time alerts for workflows. [28]
incident_response:
  documentation_links:
  - https://help.asana.com/s/article/manage-session-duration?language=en_US
  - https://help.asana.com/s/article/user-deprovisioning?language=en_US
  - https://d1gwm4cf8hecp4.cloudfront.net/pdf/Asana-Security-Whitepaper.pdf
  - https://asana.com/terms/security-standards
  - https://bridge24.com/blog/asana-news-stronger-passwords-and-security-controls-for-admins/
  - https://assets.asana.biz/m/2b106cd67e3e896d/original/Asana-Security-and-Privacy-Whitepaper.pdf
  - https://asana.com/resources/incident-management
  - https://asana.com/inside-asana/engineering-security-incident-response
  - https://forum.asana.com/t/user-activity-and-last-login-time-rest-api/689049
  invalidate_sessions_api:
    reference: https://help.asana.com/s/article/manage-session-duration?language=en_US
    value: While not explicitly an "invalidate all sessions" API, Asana's system automatically
      terminates all existing user sessions when a super admin modifies the session
      duration for their organization. Users will then get new session durations upon
      their next login. Asana also states that as part of remediation efforts for
      a security flaw, they reset all connections to their Model Context Protocol
      (MCP) server.
  known_automation_tools:
  - reference: https://asana.com/templates/incident-management
    value: Asana's own Rules feature allows for automation based on triggers and actions,
      such as assigning work, adjusting due dates, setting custom fields, and notifying
      stakeholders.
  - reference: https://zapier.com/blog/automate-asana/
    value: Zapier can be used to automate tasks in Asana and integrate with thousands
      of other apps, including keeping teams updated on tasks, connecting to Google
      Sheets, and handling form responses.
  - reference: https://asana.com/apps/integrately
    value: Integrately is a no-code automation platform that connects Asana with over
      1050 apps, enabling various automations like managing events, syncing with other
      project management tools, and streamlining customer support.
  - reference: https://n8n.io/workflows/categories/it-ops/
    value: n8n is an automation tool that can integrate with Asana for IT Operations
      workflows, including automated incident response, by using pre-built nodes or
      custom API integration.
  - reference: https://developers.asana.com/reference/audit-log-api
    value: Asana's Audit Log API can be used to set up proactive alerting with a Security
      Information and Event Management (SIEM) tool like Splunk and conduct reactive
      investigations during a security incident.
  - reference: https://sourceforge.net/software/investigation-management/integrates-with-asana/
    value: Resolver is a commercial incident response software that integrates with
      Asana, providing features like incident alerting, incident database, and workflow
      automation.
  revoke_api_key_api:
    reference: https://docs.anthropic.com/en/docs/claude-code/mcp
    value: Asana's API supports OAuth 2.0 or a Personal Access Token as an authentication
      method. The Anthropic API documentation for connecting Claude Code to tools
      via MCP mentions using `/mcp` to authenticate with remote servers that require
      OAuth 2.0 and provides an option to "Clear authentication" in the `/mcp` menu
      to revoke access.
  session_timeout_configuration:
    reference: https://help.asana.com/s/article/manage-session-duration?language=en_US
    value: Super admins of organizations and divisions can manage session durations
      for Asana web and desktop users. Options include "Never automatically log out"
      or "Log out after 14 days." For idle time, options are "Allow unlimited idle
      time" or "Log out after idle time defined" (between 1 and 14 days).
  suspend_user_api:
    reference: https://help.asana.com/s/article/user-deprovisioning?language=en_US
    value: Asana allows for user deactivation through its API. This process disables
      all of a user's account memberships. Super admins can define which super admin
      becomes the owner of the deactivated user's previously assigned tasks. [19,
      26]
  user_status_api:
    reference: https://forum.asana.com/t/user-activity-and-last-login-time-rest-api/689049
    value: The Asana API provides an endpoint to get user information, but it does
      not directly offer "Last Activity" or "Last Login" fields. However, the audit
      logs, available via the Audit Log API, include an 'api_authentication_method'
      field which can indicate user interaction via cookie, access token, or OAuth.
      This Audit Log API is available on the Enterprise+ subscription tier. [22, 23]
  user_toggle_api:
    reference: https://help.asana.com/s/article/user-deprovisioning?language=en_US
    value: Asana allows deactivating a user through the Admin Console or via an identity
      provider like Okta. While the documentation doesn't explicitly state that this
      action disables active sessions, modifying session duration by a super admin
      will terminate existing sessions. There's also an API endpoint to remove a user
      from a workspace or organization, which requires admin privileges.
